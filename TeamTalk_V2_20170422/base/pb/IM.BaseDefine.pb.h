// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#ifndef PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED
#define PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace BaseDefine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eBaseDefine_2eproto();
void protobuf_AssignDesc_IM_2eBaseDefine_2eproto();
void protobuf_ShutdownFile_IM_2eBaseDefine_2eproto();


enum ServiceID {
  SID_LOGIN = 1
};
bool ServiceID_IsValid(int value);
const ServiceID ServiceID_MIN = SID_LOGIN;
const ServiceID ServiceID_MAX = SID_LOGIN;
const int ServiceID_ARRAYSIZE = ServiceID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceID_descriptor();
inline const ::std::string& ServiceID_Name(ServiceID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceID_descriptor(), value);
}
inline bool ServiceID_Parse(
    const ::std::string& name, ServiceID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceID>(
    ServiceID_descriptor(), name, value);
}
enum LoginCmdID {
  CID_LOGIN_REQ_MSGSERVER = 257
};
bool LoginCmdID_IsValid(int value);
const LoginCmdID LoginCmdID_MIN = CID_LOGIN_REQ_MSGSERVER;
const LoginCmdID LoginCmdID_MAX = CID_LOGIN_REQ_MSGSERVER;
const int LoginCmdID_ARRAYSIZE = LoginCmdID_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginCmdID_descriptor();
inline const ::std::string& LoginCmdID_Name(LoginCmdID value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginCmdID_descriptor(), value);
}
inline bool LoginCmdID_Parse(
    const ::std::string& name, LoginCmdID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginCmdID>(
    LoginCmdID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace BaseDefine
}  // namespace IM

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::IM::BaseDefine::ServiceID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::ServiceID>() {
  return ::IM::BaseDefine::ServiceID_descriptor();
}
template <> struct is_proto_enum< ::IM::BaseDefine::LoginCmdID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IM::BaseDefine::LoginCmdID>() {
  return ::IM::BaseDefine::LoginCmdID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eBaseDefine_2eproto__INCLUDED
